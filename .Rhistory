knitr::opts_chunk$set(echo = TRUE)
#install.packages("Rcpp")
library("Rcpp")
## Functions should appear in global environment
sourceCpp(file = "rcpp_source.cpp")
r_ladies()
## Basic c++ function format
# return_type function_name(arg1_type arg1, arg2_type arg2, ...){
#   code;
#   code;
#   return somthing;
# }
cppFunction('int add1(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
add1(1, 2, 3)
add1(1.2, 2, 3)
add1(TRUE, 2, 3)
## or for simple operations
evalCpp("1 + 2 + 3")
## Equivalent R and C++ functions
## Returns  1 if the input is positive and -1 if it’s negative
signR <- function(x) {
if (x > 0) {
1
} else if (x == 0) {
0
} else {
-1
}
}
cppFunction('int signC(int x) {
if (x > 0) {
return 1;
} else if (x == 0) {
return 0;
} else {
return -1;
}
}')
signR(5)
signC(5)
evalCpp("5 > 0")
add2(1, 2, 3) ## from file I provided, rcpp_source.cpp
sumC(1:10)
check_greater(1:10, 5)
fill_matrix(2, 2)
fill_matrix(5, 5)
set.seed(19813)
x <- rnorm(1000, 10, 2)
y <- .25*x + rnorm(1000)
mod <- lm(y ~ x)
mod
grab_alpha(mod)
our_list <- list_of_vectors()
our_list$numeric
our_list$integer
our_list$logical
our_list$string
sourceCpp("rcpp_source.cpp")
sourceCpp("rcpp_source.cpp")
our_list <- list_of_vectors()
our_list$numeric
sourceCpp("rcpp_source.cpp")
our_list <- list_of_vectors()
our_list$numeric
our_list$integer
sourceCpp("rcpp_source.cpp")
our_list <- list_of_vectors()
our_list$numeric
our_list$integer
our_list$logical
our_list$string
sourceCpp("rcpp_source.cpp")
our_list <- list_of_vectors()
our_list$numeric
our_list$integer
our_list$logical
our_list$string
knitr::opts_chunk$set(echo = TRUE)
#install.packages("Rcpp")
library("Rcpp")
## Functions should appear in global environment
sourceCpp(file = "rcpp_source.cpp")
r_ladies()
## Basic c++ function format
# return_type function_name(arg1_type arg1, arg2_type arg2, ...){
#   code;
#   code;
#   return somthing;
# }
cppFunction('int add1(int x, int y, int z) {
int sum = x + y + z;
return sum;
}')
add1(1, 2, 3)
add1(1.2, 2, 3)
add1(TRUE, 2, 3)
## or for simple operations
evalCpp("1 + 2 + 3")
## Equivalent R and C++ functions
## Returns  1 if the input is positive and -1 if it’s negative
signR <- function(x) {
if (x > 0) {
1
} else if (x == 0) {
0
} else {
-1
}
}
cppFunction('int signC(int x) {
if (x > 0) {
return 1;
} else if (x == 0) {
return 0;
} else {
return -1;
}
}')
signR(5)
signC(5)
evalCpp("5 > 0")
add2(1, 2, 3) ## from file I provided, rcpp_source.cpp
sumC(1:10)
check_greater(1:10, 5)
fill_matrix(2, 2)
fill_matrix(5, 5)
set.seed(19813)
x <- rnorm(1000, 10, 2)
y <- .25*x + rnorm(1000)
mod <- lm(y ~ x)
mod
grab_alpha(mod)
our_list <- list_of_vectors()
our_list$numeric
our_list$integer
our_list$logical
our_list$string
# install.packages("microbenchmark")
library(microbenchmark)
sumR <- function(x){
total <- 0
for(i in x){
total <- total + i
}
return(total)
}
## Built-in sum() is unsurprisingly fast, and C++ looping is close!
## Comparable R function is much slower.
microbenchmark(sum(1:100),
sumC(1:100),
sumR(1:100))
## Even at something R is good at, C++ is faster (trivial example, but still!)
test_vec <- 1:10000
microbenchmark(sum(test_vec^5),
pow_and_sum(test_vec, 5),
unit = "s")
using_rfunc(sum, 1:10)
using_rfunc(diff, 1:10)
using_rfunc(paste, 1:10)
using_rfunc(paste0, 1:10)
using_rfunc(cumsum, 1:10)
